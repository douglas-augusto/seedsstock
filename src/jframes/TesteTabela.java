/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package jframes;

//import DAO.SementeDAO;
import classes.Semente;
//import conection.MakeConnection;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author ramyllo
 */
public class TesteTabela extends javax.swing.JFrame {

    ArrayList<Semente> arraySementes = new ArrayList();
    // DefaultTableModel dtmC = (DefaultTableModel) tabelaBusca.getModel();

    /**
     * Creates new form TesteTabela
     */
    public TesteTabela() {
        initComponents();
        try {
            carregaArray();
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(TesteTabela.class.getName()).log(Level.SEVERE, null, ex);
        }
        carregaTabela();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tabelaBusca = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();
        tfPesquisar = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jButton3 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        tabelaBusca.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Id", "Nome", "Preço Compra", "Preço Venda"
            }
        ));
        jScrollPane1.setViewportView(tabelaBusca);

        jButton1.setText("Informações");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        tfPesquisar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tfPesquisarActionPerformed(evt);
            }
        });
        tfPesquisar.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                tfPesquisarKeyReleased(evt);
            }
        });

        jLabel1.setText("Pesquisar");

        jButton3.setText("Linha Selecionada");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton2.setText("Excluir");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        jButton2.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jButton2KeyReleased(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(13, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 375, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jButton3)
                        .addGap(53, 53, 53)
                        .addComponent(jButton2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton1))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(29, 29, 29)
                        .addComponent(tfPesquisar, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(27, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(tfPesquisar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 275, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jButton3)
                    .addComponent(jButton2))
                .addGap(6, 6, 6))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        //imprime();
        TelaInfo info = new TelaInfo();
        info.carregaInfo(arraySementes.get(tabelaBusca.getSelectedRow()));
        
        //new TelaInfo();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void tfPesquisarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tfPesquisarActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_tfPesquisarActionPerformed

    private void tfPesquisarKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tfPesquisarKeyReleased

        sorterTabelaBusca();
    }//GEN-LAST:event_tfPesquisarKeyReleased

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        System.out.println("Linha Selecionada = " + tabelaBusca.getSelectedRow());
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        /*QUANDO O BANCO TIVER FEITO, EDITAR AQUI
        SementeDAO sdao = new SementeDAO();
        String item = arraySementes.get(tabelaBusca.getSelectedRow()).getNome();
        int i = JOptionPane.showConfirmDialog(null, "Deseja realmente EXCLUIR "+item+" do Cadastro?", "Excluir", JOptionPane.OK_OPTION);
        
        if(i == 0){
        try {
            sdao.excluir(arraySementes.get(tabelaBusca.getSelectedRow()).getIdsemente());
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(TesteTabela.class.getName()).log(Level.SEVERE, null, ex);
        }
        }else{
            System.out.println(arraySementes.get(tabelaBusca.getSelectedRow()).getIdsemente());
        }*/
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton2KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jButton2KeyReleased
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton2KeyReleased

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(TesteTabela.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(TesteTabela.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(TesteTabela.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TesteTabela.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new TesteTabela().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tabelaBusca;
    private javax.swing.JTextField tfPesquisar;
    // End of variables declaration//GEN-END:variables

    public void sorterTabelaBusca() {

        try {
            carregaArraySorter();
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(TesteTabela.class.getName()).log(Level.SEVERE, null, ex);
        }

        DefaultTableModel dtmBusca;

        String[] colunas = {"Id Semente", "Nome", "Espécie", "Preço Venda", "Preço Compra"};
        String[] linha = new String[5];

        dtmBusca = new DefaultTableModel(null, colunas);
        for (int i = 0; i < arraySementes.size(); i++) {
            linha[0] = Integer.toString(arraySementes.get(i).getIdsemente());
            linha[1] = arraySementes.get(i).getNome();
            linha[2] = arraySementes.get(i).getEspecie();
            linha[3] = Float.toString(arraySementes.get(i).getPreco_compra());
            linha[4] = Float.toString(arraySementes.get(i).getPreco_venda());
            dtmBusca.addRow(linha);
        }
        tabelaBusca.setModel(dtmBusca);
        
    }

    public void carregaTabela() {
        DefaultTableModel dtmBusca;

        String[] colunas = {"Id Semente", "Nome", "Espécie", "Preço Venda", "Preço Compra"};
        String[] linha = new String[5];

        dtmBusca = new DefaultTableModel(null, colunas);

        //String sql = "SELECT * FROM sementes";
        String sql = "SELECT * FROM sementes ORDER BY nome ASC";

        dtmBusca = new DefaultTableModel(null, colunas);

        Connection con = null;
        /*QUANDO O BANCO TIVER FEITO, EDITAR AQUI
        try {
            con = MakeConnection.getConnection();
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(TesteTabela.class.getName()).log(Level.SEVERE, null, ex);
        }*/

        Statement stmt;
        try {
            stmt = con.createStatement();
            ResultSet rs = stmt.executeQuery(sql);

            while (rs.next()) {
                linha[0] = rs.getString("idsemente");
                linha[1] = rs.getString("nome");
                linha[2] = rs.getString("especie");
                linha[3] = rs.getString("preco_compra");
                linha[4] = rs.getString("preco_venda");
                dtmBusca.addRow(linha);
            }
            tabelaBusca.setModel(dtmBusca);
        } catch (SQLException ex) {
            //  Logger.getLogger(dtmBusca.class.getName()).log(Level.SEVERE, null, ex);
        }

    }
    
    
    public void carregaArraySorter() throws ClassNotFoundException {
        //Connection con = MakeConnection.getConnection(); QUANDO O BANCO TIVER FEITO, EDITAR AQUI
        PreparedStatement stmt = null;

        ResultSet rs = null;

        int cont = 0;
        //List<Pessoa> pessoasSql = new ArrayList<>();
        //SementeDAO sDao = new SementeDAO(); QUANDO O BANCO TIVER FEITO, EDITAR AQUI
        
        /*QUANDO O BANCO TIVER FEITO, EDITAR AQUI
        try {
            stmt = con.prepareStatement("SELECT * FROM sementes where nome LIKE '%" + tfPesquisar.getText() + "%' ORDER BY nome ASC");
            rs = stmt.executeQuery();

            arraySementes.clear();
            while (rs.next()) {
                /////////////////////////////////
                Semente semente = new Semente();
                ///////////////////////////////////
                semente.setIdsemente(rs.getInt("idsemente"));
                semente.setNome(rs.getString("nome"));
                semente.setEspecie(rs.getString("especie"));
                semente.setQuant(rs.getInt("quant"));
                semente.setRaridade(rs.getString("raridade"));
                semente.setDia_col(rs.getInt("dia_col"));
                semente.setMes_col(rs.getInt("mes_col"));
                semente.setAno_col(rs.getInt("ano_col"));
                semente.setDia_val(rs.getInt("dia_val"));
                semente.setMes_val(rs.getInt("mes_val"));
                semente.setAno_val(rs.getInt("ano_val"));

                semente.setPreco_compra(rs.getFloat("preco_compra"));
                semente.setPreco_venda(rs.getFloat("preco_venda"));

                semente.setOrigem(rs.getString("origem"));
                semente.setFornecedor(rs.getString("fornecedor"));
                semente.setCondicoes_plantil(rs.getString("condicoes_plantil"));
                semente.setObservacoes(rs.getString("observacoes"));

                arraySementes.add(semente);

                //Preenchendo tabela
            }

        } catch (SQLException ex) {
            Logger.getLogger(SementeDAO.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            MakeConnection.closeConnection(con, stmt, rs);
        } */
        // return arraySementes;
    }


    //List<Semente>
    public void carregaArray() throws ClassNotFoundException {
        //Connection con = MakeConnection.getConnection(); QUANDO O BANCO TIVER FEITO, EDITAR AQUI
        PreparedStatement stmt = null;

        ResultSet rs = null;

        int cont = 0;
       
       // sementeDAO sDao = new sementeDAO();
       
       /*QUANDO O BANCO TIVER FEITO, EDITAR AQUI
        try {
            stmt = con.prepareStatement("SELECT * FROM sementes ORDER BY nome ASC");
            rs = stmt.executeQuery();

            arraySementes.clear();
            while (rs.next()) {
                /////////////////////////////////
                Semente semente = new Semente();
                ///////////////////////////////////
                semente.setIdsemente(rs.getInt("idsemente"));
                semente.setNome(rs.getString("nome"));
                semente.setEspecie(rs.getString("especie"));
                semente.setQuant(rs.getInt("quant"));
                semente.setRaridade(rs.getString("raridade"));
                semente.setDia_col(rs.getInt("dia_col"));
                semente.setMes_col(rs.getInt("mes_col"));
                semente.setAno_col(rs.getInt("ano_col"));
                semente.setDia_val(rs.getInt("dia_val"));
                semente.setMes_val(rs.getInt("mes_val"));
                semente.setAno_val(rs.getInt("ano_val"));

                semente.setPreco_compra(rs.getFloat("preco_compra"));
                semente.setPreco_venda(rs.getFloat("preco_venda"));

                semente.setOrigem(rs.getString("origem"));
                semente.setFornecedor(rs.getString("fornecedor"));
                semente.setCondicoes_plantil(rs.getString("condicoes_plantil"));
                semente.setObservacoes(rs.getString("observacoes"));

                arraySementes.add(semente);

                //Preenchendo tabela
            }

        } catch (SQLException ex) {
            Logger.getLogger(SementeDAO.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            MakeConnection.closeConnection(con, stmt, rs);
        }*/
        // return arraySementes;
    }

    public void imprime() {
        //sementeDAO sDao = new sementeDAO();

        for (int i = 0; i < arraySementes.size(); i++) {
            System.out.println(arraySementes.get(i).getIdsemente());
            System.out.println(arraySementes.get(i).getNome());
            System.out.println(arraySementes.get(i).getEspecie());
            System.out.println(arraySementes.get(i).getQuant());
            System.out.println(arraySementes.get(i).getRaridade());

            System.out.println(arraySementes.get(i).getDia_col());
            System.out.println(arraySementes.get(i).getMes_col());
            System.out.println(arraySementes.get(i).getAno_col());
            System.out.println(arraySementes.get(i).getDia_val());
            System.out.println(arraySementes.get(i).getMes_val());
            System.out.println(arraySementes.get(i).getAno_val());

            System.out.println(arraySementes.get(i).getPreco_compra());
            System.out.println(arraySementes.get(i).getPreco_venda());

            System.out.println(arraySementes.get(i).getOrigem());
            System.out.println(arraySementes.get(i).getFornecedor());
            System.out.println(arraySementes.get(i).getCondicoes_plantil());
            System.out.println(arraySementes.get(i).getObservacoes());

            System.out.println("\n //////////////////////////////// \n");
        }

    }

}

/*

DefaultTableModel dtmBusca;
        
       String[] colunas = {"Id Semente", "Nome","Espécie", "Preço Venda", "Preço Compra"};
       String[] linha = new String[5];
       
       dtmBusca = new DefaultTableModel(null, colunas);
       
            for(int i = 0; i < arraySementes.size(); i++){
                //linha[0] = Integer.toString(arraySementes.get(i).getIdsementes);
                linha[1] = arraySementes.get(i).getNome();
                linha[2] = arraySementes.get(i).getEspecie();
                linha[3] = Float.toString(arraySementes.get(i).getPreco_compra());
                linha[4] = Float.toString(arraySementes.get(i).getPreco_venda());
            }

*/
